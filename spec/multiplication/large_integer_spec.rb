require 'spec_helper'

module Multiplication
  class LargeInteger
    context "multiplication" do
      def test_multiply(x1, x2, expected_product)
        integer1 = Multiplication::LargeInteger.new(x1)
        integer2 = Multiplication::LargeInteger.new(x2)
        expect(integer1.fft_multiply(integer2)).to eq expected_product
      end

      it "multiplies correctly 1" do
        test_multiply(10, 10, 100)
      end

      it "multiplies correctly 2" do
        test_multiply(4070446386762401618561742381524297396597376673081572511872988703741144130016655109973926877704519855763371458496205617891658227151894394302120893805358485183757086826569332185848832054517189254895484508228187587156561515955876198393346586972212284843229376752665736191084312690146306057932256554316778149789743722229112169336993327424434869090886169741439937569775625709816737513918244,
          904881520846413188662280386937625541640542806522134436323463581485557049592128520869871739183214129606745515884880532607905548566495584234328284191139674261433131583608242270149269603585994771751568814091197135559118117102423638859722482133150763134274821482317436484666879011961621342080464375837358721510114030430974549543469255162776115590980223039140989122219936900494010576866,
          3683271716977349360953031820579193621480752608571052869199854850708096784588133336892792374496625202479523176378840166773540773711413962149532695931044491673514810152352144332958497136996943498069839765759101778954043943776359209083289137273014232117017866935272088345414554364466064269411266314033412696121963439379736924442229435879637063674649557590664084974174900881207369051660297581479798323446493704494564728809122540616126684743904366174968720530119834405665916842728279466086778641251051635201938814170714564827926022124218126111615154612385257465829746123152669467897850630883228823772538744661827346266235967867906405358892363872376212142890119106899940274046850148491304917695712642682913806458793195005864041009816972728587801359320657196454422401743304)
      end

      def random_integer(length = 1000)
        (1..length).to_a.map { (0..9).to_a.sample }.map(&:to_s).join.to_i
      end

      it "multiplies correctly 3" do
        x1 = random_integer(1_000_000)
        x2 = random_integer(1_000_000)
        start1 = Time.now
        result = x1 * x2
        end1 = Time.now

        puts "Time for ruby multiplication: #{end1 - start1}"

        start2 = Time.now
        test_multiply(x1, x2, result)
        end2 = Time.now

        puts "Time for FFT multiplication: #{end2 - start2}"
      end
    end
  end
end
